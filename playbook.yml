---
# ============================================================================
#  Ansible Playbook: Secure Debian/Ubuntu Server Setup
# ============================================================================
#
#  Objetivo: Preparar um servidor mínimo e seguro para produção, com
#            foco em hardening e boas práticas.
#
#  Como executar:
#  ansible-playbook -i inventory.ini playbook.yml
#
# ============================================================================

- name: Preparar e Proteger Servidor Debian/Ubuntu
  hosts: servers
  become: yes
  vars:
    deploy_user: deploy
    swap_file_path: /swapfile
    # Define o tamanho do swap como 50% da RAM, com um mínimo de 1GB e um máximo de 4GB.
    swap_size_mb: "{{ ([1024, (ansible_memtotal_mb / 2) | int, 4096] | sort)[1] }}"

    # Variáveis para Traefik e Portainer
    traefik_version: "v3.1.0"
    portainer_version: "2.20.1" # Versão mais recente do Portainer CE
    traefik_domain: "traefik.example.com" # TROCAR PELO SEU DOMÍNIO
    portainer_domain: "portainer.example.com" # TROCAR PELO SEU DOMÍNIO
    letsencrypt_email: "seu-email@example.com" # TROCAR PELO SEU EMAIL
    # Variáveis para a stack de Observabilidade
    prometheus_version: "v2.53.0"
    grafana_version: "11.1.0"
    jaeger_version: "1.57"
    prometheus_domain: "prometheus.example.com" # TROCAR PELO SEU DOMÍNIO
    grafana_domain: "grafana.example.com" # TROCAR PELO SEU DOMÍNIO
    jaeger_domain: "jaeger.example.com" # TROCAR PELO SEU DOMÍNIO

  tasks:
    # --------------------------------------------------------------------------
    # ETAPA 1: ATUALIZAÇÃO DO SISTEMA E PACOTES ESSENCIAIS
    # --------------------------------------------------------------------------
    - name: "Atualizar cache de pacotes (APT)"
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600
      tags: [packages]

    - name: "Realizar upgrade completo do sistema para a última versão"
      ansible.builtin.apt:
        upgrade: dist
        autoremove: yes
      tags: [packages]

    - name: "Verificar se um reinício é necessário após a atualização do sistema"
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required_file
      tags: [packages]

    - name: "Reiniciar o servidor (se necessário), aguardar reconexão e esperar 2 minutos"
      ansible.builtin.reboot:
        msg: "Reiniciando o servidor devido a uma atualização crítica (ex: kernel). Aguardando 2 minutos para continuar."
        reboot_timeout: 300
        post_reboot_delay: 120
      when: reboot_required_file.stat.exists
      tags: [packages]

    - name: "Instalar pacotes de segurança e utilitários essenciais"
      ansible.builtin.apt:
        name:
          # Segurança
          - ufw
          - fail2ban
          - unattended-upgrades
          - auditd
          - apt-listchanges
          # Utilitários
          - htop
          - curl
          - wget
          - git
          - vim
          - rsync
          - ca-certificates
          - gnupg
        state: present
      tags: [packages]

    - name: "Remover pacotes desnecessários para reduzir a superfície de ataque"
      ansible.builtin.apt:
        name:
          - popularity-contest
          - telnetd
          - rsh-server
          - avahi-daemon
        state: absent
        purge: yes
      tags: [packages, security]

    # --------------------------------------------------------------------------
    # ETAPA 2: CRIAÇÃO E CONFIGURAÇÃO DE USUÁRIO
    # --------------------------------------------------------------------------
    - name: "Garantir que o usuário '{{ deploy_user }}' existe e pertence ao grupo 'sudo'"
      ansible.builtin.user:
        name: "{{ deploy_user }}"
        shell: /bin/bash
        groups: sudo
        append: yes
      tags: [user]

    - name: "Conceder a '{{ deploy_user }}' acesso sudo sem senha"
      ansible.builtin.lineinfile:
        path: "/etc/sudoers.d/{{ deploy_user }}"
        line: "{{ deploy_user }} ALL=(ALL) NOPASSWD: ALL"
        create: yes
        validate: 'visudo -cf %s'
        mode: '0440'
      tags: [user, sudo]

    # --------------------------------------------------------------------------
    # ETAPA 3: CONFIGURAÇÃO DE SWAP (MEMÓRIA VIRTUAL)
    # --------------------------------------------------------------------------
    - name: "Configurar e ativar um arquivo de swap"
      community.general.swap_file:
        name: "{{ swap_file_path }}"
        size: "{{ swap_size_mb }}M"
      tags: [system, swap]

    # --------------------------------------------------------------------------
    # ETAPA 4: REFORÇO DE SEGURANÇA DO KERNEL E SISTEMA
    # --------------------------------------------------------------------------
    - name: "Aplicar configurações de segurança ao Kernel via sysctl"
      ansible.builtin.sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { name: 'net.ipv4.conf.all.rp_filter', value: '1' }
        - { name: 'net.ipv4.conf.default.rp_filter', value: '1' }
        - { name: 'net.ipv4.icmp_echo_ignore_broadcasts', value: '1' }
        - { name: 'net.ipv4.conf.all.accept_redirects', value: '0' }
        - { name: 'net.ipv4.conf.default.accept_redirects', value: '0' }
        - { name: 'net.ipv4.conf.all.secure_redirects', value: '0' }
        - { name: 'net.ipv4.conf.default.secure_redirects', value: '0' }
        - { name: 'net.ipv4.conf.all.accept_source_route', value: '0' }
        - { name: 'net.ipv4.conf.default.accept_source_route', value: '0' }
        - { name: 'net.ipv4.tcp_syncookies', value: '1' }
        - { name: 'kernel.dmesg_restrict', value: '1' }
        - { name: 'kernel.kptr_restrict', value: '2' }
        - { name: 'kernel.yama.ptrace_scope', value: '1' }
      tags: [system, kernel, security]

    # --------------------------------------------------------------------------
    # ETAPA 5: REFORÇO DE SEGURANÇA DO SSH
    # --------------------------------------------------------------------------
    - name: "Criar banner de aviso para o login SSH"
      ansible.builtin.copy:
        dest: /etc/issue.net
        content: |
          ******************************************************************
          *                     ACESSO AUTORIZADO APENAS                   *
          *                                                                *
          *      Este sistema é monitorado. Todas as atividades são        *
          *      registradas e podem ser usadas como evidência.            *
          ******************************************************************
        mode: '0644'
      tags: [ssh, security]

    - name: "Aplicar configurações de segurança ao SSH"
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?{{ item.key }}"
        line: "{{ item.key }} {{ item.value }}"
        state: present
      loop:
        - { key: 'PermitRootLogin', value: 'no' }
        - { key: 'PasswordAuthentication', value: 'yes' } # Mantém login por senha
        - { key: 'PermitEmptyPasswords', value: 'no' }
        - { key: 'ChallengeResponseAuthentication', value: 'no' }
        - { key: 'X11Forwarding', value: 'no' }
        - { key: 'MaxAuthTries', value: '3' }
        - { key: 'LoginGraceTime', value: '60' }
        - { key: 'AllowUsers', value: '{{ deploy_user }}' }
        - { key: 'Banner', value: '/etc/issue.net' }
        # Garante que o subsistema SFTP padrão esteja ativo
        - { key: 'Subsystem', value: 'sftp /usr/lib/openssh/sftp-server' }
      notify: Reiniciar SSH
      tags: [ssh, security]

    # --------------------------------------------------------------------------
    # ETAPA 6: CONFIGURAÇÃO DO FIREWALL (UFW)
    # --------------------------------------------------------------------------
    - name: "Resetar configurações do UFW para um estado limpo"
      community.general.ufw:
        state: reset
      tags: [firewall, ufw]

    - name: "Definir políticas padrão do UFW (negar entrada, permitir saída)"
      community.general.ufw:
        direction: "{{ item.direction }}"
        policy: "{{ item.policy }}"
      loop:
        - { direction: 'incoming', policy: 'deny' }
        - { direction: 'outgoing', policy: 'allow' }
      tags: [firewall, ufw]

    - name: "Permitir conexões SSH (essencial para não perder o acesso)"
      community.general.ufw:
        rule: allow
        name: OpenSSH
      tags: [firewall, ufw]

    - name: "Permitir tráfego HTTP na porta 80"
      community.general.ufw:
        rule: allow
        port: '80'
        proto: tcp
      tags: [firewall, ufw]

    - name: "Permitir tráfego HTTPS na porta 443"
      community.general.ufw:
        rule: allow
        port: '443'
        proto: tcp
      tags: [firewall, ufw]

    - name: "Ativar o firewall UFW com logging"
      community.general.ufw:
        state: enabled
        logging: 'on'
      tags: [firewall, ufw]

    # --------------------------------------------------------------------------
    # ETAPA 7: PROTEÇÃO CONTRA FORÇA BRUTA (FAIL2BAN)
    # --------------------------------------------------------------------------
    - name: "Configurar Fail2Ban para proteger o SSH"
      ansible.builtin.copy:
        dest: /etc/fail2ban/jail.local
        content: |
          [DEFAULT]
          bantime  = 1h
          findtime = 10m
          maxretry = 5
          backend  = systemd

          [sshd]
          enabled = true
        mode: '0644'
      notify: Reiniciar Fail2Ban
      tags: [fail2ban, security]

    - name: "Garantir que o serviço Fail2Ban esteja ativo e habilitado"
      ansible.builtin.service:
        name: fail2ban
        state: started
        enabled: yes
      tags: [fail2ban]

    # --------------------------------------------------------------------------
    # ETAPA 8: ATUALIZAÇÕES AUTOMÁTICAS DE SEGURANÇA
    # --------------------------------------------------------------------------
    - name: "Configurar APT para atualizações automáticas"
      ansible.builtin.copy:
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        content: |
          APT::Periodic::Update-Package-Lists "1";
          APT::Periodic::Unattended-Upgrade "1";
          APT::Periodic::AutocleanInterval "7";
        owner: root
        group: root
        mode: '0644'
      tags: [unattended-upgrades, security]

    - name: "Restringir unattended-upgrades apenas para pacotes de segurança"
      ansible.builtin.copy:
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        content: |
          // Apenas baixar e instalar atualizações de segurança automaticamente
          Unattended-Upgrade::Allowed-Origins {
              "${distro_id}:${distro_codename}-security";
          };

          // Enviar email sobre problemas
          Unattended-Upgrade::Mail "root@localhost";

          // Remover dependências não utilizadas
          Unattended-Upgrade::Remove-Unused-Dependencies "true";

          // Não reiniciar automaticamente
          Unattended-Upgrade::Automatic-Reboot "false";
        owner: root
        group: root
        mode: '0644'
      tags: [unattended-upgrades, security]

    # --------------------------------------------------------------------------
    # ETAPA 9: AUDITORIA DO SISTEMA (AUDITD)
    # --------------------------------------------------------------------------
    - name: "Configurar regras de auditoria para monitorar arquivos críticos"
      ansible.builtin.copy:
        dest: /etc/audit/rules.d/audit.rules
        content: |
          # Regras de auditoria para monitoramento de segurança
          -w /etc/passwd -p wa -k passwd_changes
          -w /etc/group -p wa -k group_changes
          -w /etc/shadow -p wa -k shadow_changes
          -w /etc/sudoers -p wa -k sudoers_changes
          -w /etc/ssh/sshd_config -p wa -k sshd_config_changes
          -w /var/log/auth.log -p wa -k auth_log
          -w /var/log/faillog -p wa -k login_failures
        mode: '0640'
      notify: Reiniciar Auditd
      tags: [auditd, security]

    - name: "Garantir que o serviço Auditd esteja ativo e habilitado"
      ansible.builtin.service:
        name: auditd
        state: started
        enabled: yes
      tags: [auditd, security]

    # --------------------------------------------------------------------------
    # ETAPA 10: INSTALAÇÃO E CONFIGURAÇÃO DO DOCKER
    # --------------------------------------------------------------------------
    - name: "Instalar pré-requisitos para o repositório Docker via HTTPS"
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
        state: present
        update_cache: yes
      tags: [docker]

    - name: "Adicionar a chave GPG oficial do Docker"
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      tags: [docker]

    - name: "Adicionar o repositório oficial do Docker"
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
      tags: [docker]

    - name: "Instalar Docker Engine e plugins relacionados"
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes
      tags: [docker]

    - name: "Adicionar o usuário '{{ deploy_user }}' ao grupo docker"
      ansible.builtin.user:
        name: "{{ deploy_user }}"
        groups: docker
        append: yes
      tags: [docker]

    - name: "Configurar o daemon do Docker com rotação de logs"
      ansible.builtin.copy:
        dest: /etc/docker/daemon.json
        content: |
          {
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "10m",
              "max-file": "3"
            }
          }
        owner: root
        group: root
        mode: '0644'
      notify: Reiniciar Docker
      tags: [docker]

    - name: "Garantir que o serviço Docker esteja ativo e habilitado"
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes
      tags: [docker]

    # --------------------------------------------------------------------------
    # ETAPA 11: IMPLANTAÇÃO DA STACK DE APLICAÇÕES (TRAEFIK + PORTAINER)
    # --------------------------------------------------------------------------
    - name: "Criar rede para o Traefik"
      community.docker.docker_network:
        name: traefik-public
      tags: [apps]

    - name: "Criar diretórios de configuração para Traefik, Portainer e Observabilidade"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: deploy
        group: deploy
        mode: '0755'
      loop:
        - /opt/traefik
        - /opt/portainer
        - /opt/prometheus
        - /opt/grafana
      tags: [apps]

    - name: "Criar arquivo acme.json para o Let's Encrypt com permissões restritas"
      ansible.builtin.file:
        path: "/opt/traefik/acme/acme.json"
        state: touch
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: "0600"
      tags: [apps]

    - name: "Gerar o arquivo de configuração do Prometheus a partir do template"
      ansible.builtin.template:
        src: templates/prometheus.yml.j2
        dest: /opt/prometheus/config/prometheus.yml
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: "0644"
      tags: [apps]

    - name: "Gerar o arquivo docker-compose.yml a partir do template"
      ansible.builtin.template:
        src: templates/docker-compose.yml.j2
        dest: /opt/docker-compose.yml
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: "0644"
      tags: [apps]

    - name: "Implantar a stack de Traefik, Portainer e Observabilidade com Docker Compose"
      community.docker.docker_compose_v2:
        project_src: /opt
        files:
          - docker-compose.yml
      tags: [apps]

    - name: "Copy Grafana provisioning files"
      copy:
        src: grafana
        dest: /opt/
        owner: deploy
        group: deploy
      tags: [apps]

    - name: Template Prometheus config file
      template:
        src: templates/prometheus.yml.j2
        dest: /opt/prometheus/config/prometheus.yml
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: "0644"
      tags: [apps]

  # ----------------------------------------------------------------------------
  # HANDLERS: Ações acionadas por tarefas anteriores (apenas se houver mudança)
  # ----------------------------------------------------------------------------
  handlers:
    - name: Reiniciar SSH
      ansible.builtin.service:
        name: sshd
        state: restarted

    - name: Reiniciar Fail2Ban
      ansible.builtin.service:
        name: fail2ban
        state: restarted

    - name: Reiniciar Auditd
      ansible.builtin.service:
        name: auditd
        state: restarted

    - name: Reiniciar Docker
      ansible.builtin.service:
        name: docker
        state: restarted
